var test = require('tape')

var setval = require('./')

test('setval edge cases', function (t) {
  t.plan(6)
  var state = { a: { b: [5,6,7] }, '': 3 }
  console.log('\nstate =',JSON.stringify(state)+'\n')
  setval(state, undefined, { x: 5})
  t.deepEqual(state, { a: { b: [5,6,7] }, '': 3 }, "setval(state, undefined, { x: 5})")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state)
  t.deepEqual(state, { a: { b: [5,6,7] }, '': 3 }, "setval(state)")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, '')
  t.deepEqual(state, { a: { b: [5,6,7] } }, "setval(state, '')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, '', 6)
  t.deepEqual(state, { '': 6, a: { b: [5,6,7] } }, "setval(state, '', 6)")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, '/')
  t.deepEqual(state, { '': 6, a: { b: [5,6,7] } }, "setval(state, '/')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, '/', 'yay')
  t.deepEqual(state, { '': { '': 'yay' }, a: { b: [5,6,7] } }, "setval(state, '/', 'yay')")
  console.log('      =',JSON.stringify(state)+'\n')
})

test('setval basics', function (t) {
  t.plan(6)
  var state = { a: { b: [5,6,7] }, '': 3 }
  console.log('\nstate =',JSON.stringify(state)+'\n')
  setval(state, 'a', 'm3h')
  t.deepEqual(state, { '': 3, a: 'm3h' }, "setval(state, 'a', 'm3h')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a')
  t.deepEqual(state, { '': 3 }, "setval(state, 'a')")
  console.log('      =',JSON.stringify(state)+'\n')
   setval(state, '/a', { b: 5 })
   t.deepEqual(state, { '': { a: { b: 5 } } }, "setval(state, '/a', { b: 5 })")
   console.log('      =',JSON.stringify(state)+'\n')
   setval(state, '/a/', 123 )
   t.deepEqual(state, { '': { a: { b: 5, '': 123 } } }, "setval(state, '/a/', 123)")
   console.log('      =',JSON.stringify(state)+'\n')
   setval(state, '//', 'yay' )
   t.deepEqual(state, { '': { a: { b: 5, '': 123 }, '': { '': 'yay' } } }, "setval(state, '//', 'yay')")
   console.log('      =',JSON.stringify(state)+'\n')
   setval(state, 'a/', { x: 5} )
   t.deepEqual(state, { '': { a: { b: 5, '': 123 }, '': { '': 'yay' } }, a: { '': { x: 5 } } }, "setval(state, 'a/', { x: 5} )")
   console.log('      =',JSON.stringify(state)+'\n')
})

test('setval normal', function (t) {
  t.plan(5)
  var state = { }
  console.log('\nstate =',JSON.stringify(state)+'\n')
  setval(state, 'a/b', 'hello world')
  t.deepEqual(state, { a: { b: 'hello world' } }, "setval(state, 'a/b', 'hello world')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a/c', 'foobar')
  t.deepEqual(state, { a: { b: 'hello world', c: 'foobar' } }, "setval(state, 'a/c', 'foobar')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a/c', null)
  t.deepEqual(state, { a: { b: 'hello world', c: null } }, "setval(state, 'a/c', null)")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a/c')
  t.deepEqual(state, { a: { b: 'hello world' } }, "setval(state, 'a/c')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a/b/c', true)
  t.deepEqual(state, { a: { b: { c: true } } }, "setval(state, 'a/b/c', true)")
  console.log('      =',JSON.stringify(state)+'\n')
})

test('setval arrays', function (t) {
  t.plan(7)
  var state = { }
  console.log('\nstate =',JSON.stringify(state)+'\n')
  setval(state, 'a/b', 'hello world')
  t.deepEqual(state, { a: { b: 'hello world' } }, "setval(state, 'a/b', 'hello world')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a', [5,6,7])
  t.deepEqual(state, { a: [5,6,7] }, "setval(state, 'a', [5,6,7]")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'b', { y: 2 })
  t.deepEqual(state, { a: [5,6,7], b: { y: 2} }, "setval(state, 'b', { y: 2 })")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'b/0', { x: 2 })
  t.deepEqual(state, { a: [5,6,7], b: { y: 2, 0: { x: 2 } } }, "setval(state, 'b/0', { x: 2 })")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'b/y')
  t.deepEqual(state, { a: [5,6,7], b: { 0: { x: 2 } } }, "setval(state, 'b/y')")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a/1', { x: 1 })
  t.deepEqual(state, { a: [5,{ x: 1 },7], b: { 0: { x: 2 } } }, "setval(state, 'a/1', { x: 1 })")
  console.log('      =',JSON.stringify(state)+'\n')
  setval(state, 'a/y', { foo: 'bar' })
  var x = { a: [5,{ x: 1 },7], b: { 0: { x: 2 } } }
  x.a.y = { foo: 'bar' }
  t.deepEqual(state, x, "setval(state, 'a/y', { foo: 'bar' })")
  console.log('      =', "works, but state is not JSON.stringifiable")
})

test('setval delimiter', function (t) {
  t.plan(1)
  var state = { }
  console.log('\nstate =',JSON.stringify(state)+'\n')
  setval(state, 'a.b', 'hello world', '.')
  t.deepEqual(state, { a: { b: 'hello world' } }, "setval(state, 'a.b', 'hello world', '.')")
  console.log('      =',JSON.stringify(state)+'\n')
})
